{$assertions on}

type
  TIntegerArray = array of Int32;
  TExtendedArray = array of Extended;
  TPoint = record X, Y: Integer; end;
  TPointArray = array of TPoint;

procedure TestString;
var
  Str: String = 'Hello';
begin
  Assert(Str.First() = 'H');
  Assert(Str.Last() = 'o');
  Assert(Str = 'Hello');
  while (Str.Length() > 0) do
    Assert(Str.Last() = Str.Pop());
end;

procedure TestSort;
var
  Arr: TIntegerArray = [1,2,3,4,5];
begin
  Arr.Sort(TIntegerArray([5,4,3,2,1]), True);
  Assert(ToString(Arr) = '[5, 4, 3, 2, 1]');

  Arr.Sort(TExtendedArray([0.1, 0.2, 0.3, 0.4, 0.5]), False);
  Assert(ToString(Arr) = '[1, 2, 3, 4, 5]');

  Arr.Sort();
  Assert(ToString(Arr) = '[1, 2, 3, 4, 5]');
end;

procedure TestSorted;
var
  Arr: TIntegerArray = [1,2,3,4,5];
begin
  Assert(
    ToString(Arr.Sorted(TIntegerArray([5,4,3,2,1]), True)) =
    ToString(Arr.Sorted(TExtendedArray([0.1,0.2,0.3,0.4,0.5]), False))
  );

  Assert(ToString(Arr.Sorted()) = '[1, 2, 3, 4, 5]');
end;

procedure TestCopy;
var
  Arr: TIntegerArray = [1,2,3,4,5,6];
begin
  Assert(ToString(Arr.Copy(2,2) + Arr.Copy() + Arr.Copy(4)) = '[3, 4, 1, 2, 3, 4, 5, 6, 5, 6]');
end;

procedure TestPop;
var
  Arr: TIntegerArray = [1,2,3,4,5,6];
begin
  Assert(Arr.Pop(0) = 1);
  Assert(Arr.Pop() = 6);
  Assert(Arr.Length() = 4);
end;

procedure TestDelayed;
var
  Points: TPointArray;
  P: TPoint;
begin
  Points := [];
  P := [5, 15];
  Assert(Points.Sorted(P)[0] = P); // Sorted(From: TPoint) not declared yet
end;

function TPointArray.Sorted(From: TPoint): TPointArray; overload;
begin
  Result := [From];
end;

function TIntegerArray.RandomValue: Int32; override;
begin
  Result := 123;
end;

var
  Arr: TIntegerArray = [3,2,1];
begin
  Arr.SetLength(10);

  Assert(Arr.Length() = 10);
  Assert(Arr.IndexOf(2) = 1);
  Assert(Arr.First() = 3);
  Assert(Arr.Reversed().Last() = 3);
  Assert(Arr.Pop(1) = 2);
  Assert(Arr.IndexOf(3) = 0);
  Assert(Arr.IndexOf(1) = 1);
  Assert(Arr.RandomValue() = 123);

  TestString();
  TestSort();
  TestSorted();
  TestCopy();
  TestPop();
  TestDelayed();
end;