{$assertions on}

// Sort(var array)
// Sort(var array; compareMethod: function(L,R: Type): Integer));

// Sorted(const array): array;
// Sorted(const array; compareMethod: function(L,R: Type): Integer)): array;

// Sort(var array; const weights: array of Int64);
// Sort(var array; const weights: array of Double);

// Sorted(const array; const weights: array of Int64): array;
// Sorted(const array; const weights: array of Double): array;

procedure TestCompareMethod;
type
  TPoint = record X, Y: Int32; end;
  TPointArray = array of TPoint;

  function CompareByX(L, R: TPoint): Int32; static;
  begin
    if L.X < R.X then
      Result := -1
    else
    if L.X > R.X then
      Result := 1;
  end;

var
  Points: TPointArray = [[5,0], [-5,0], [50,0], [0,0]];
begin
  Sort(Points, @CompareByX); Assert(ToString(Points) = '[{X = -5, Y = 0}, {X = 0, Y = 0}, {X = 5, Y = 0}, {X = 50, Y = 0}]');
end;

procedure TestWeights;
type
  TPoint = record X, Y: Int32; end;
  TPointArray = array of TPoint;
var
  Points: TPointArray = [[200,200], [100,100], [150,150], [75, 75]];
  Weights: TDoubleArray;
  p: TPoint;
begin
  for p in Points do
    Weights += Hypot(100 - p.x, 100 - p.y);

  Sort(Points, Weights, True);
  Assert(ToString(Points) = '[{X = 100, Y = 100}, {X = 75, Y = 75}, {X = 150, Y = 150}, {X = 200, Y = 200}]');

  Sort(Points, [Int64(3),Int64(2),Int64(1),Int64(0)], True);
  Assert(ToString(Points) = '[{X = 200, Y = 200}, {X = 150, Y = 150}, {X = 75, Y = 75}, {X = 100, Y = 100}]');
end;

procedure TestStatic;
var
  Arr: array[-2..2] of Variant = [500,-100,200,-99,0];
begin
  Sort(Arr);
  Assert(ToString(Arr) = '[-100, -99, 0, 200, 500]');
end;

type
  TVec = record X,Y,Z:Integer; end;
  TVecArray = array of TVec;

operator >(l,r: TVec): Boolean;
begin
  // needed for below
end;

// _ArraySort overloads will be checked before generating a method
procedure _ArraySort(var Arr: TVecArray); override;
begin
  Arr += [1,2,3];
end;

procedure TestOverload;
var
  Arr: TVecArray;
begin
  Sort(Arr);
  Assert(ToString(Arr) = '[{X = 1, Y = 2, Z = 3}]');
end;

var
  Ints: array of Int32 = [100, -100, $FFFFFF, 5, 0];
  Strs: array of String = ['Niels', 'Olly', 'Slacky', '0'];
  Vars: array of Variant = [500, 400, -300, 200, 100];
  Floats: array of Single = [0.2,0.4,0.1];
begin
  Assert(ToString(Sorted(Ints)) = '[-100, 0, 5, 100, 16777215]');
  Assert(ToString(Sorted(Strs)) = '[0, Niels, Olly, Slacky]');
  Assert(ToString(Sorted(Vars)) = '[-300, 100, 200, 400, 500]');
  Assert(Sorted(Floats)[0] = Single(0.1));
  Assert(Sorted(Floats)[1] = Single(0.2));
  Assert(Sorted(Floats)[2] = Single(0.4));

  Sort(Ints);   Assert(ToString(Ints) = '[-100, 0, 5, 100, 16777215]');
  Sort(Strs);   Assert(ToString(Strs) = '[0, Niels, Olly, Slacky]');
  Sort(Vars);   Assert(ToString(Vars) = '[-300, 100, 200, 400, 500]');
  Sort(Floats); Assert(Floats[0] = Single(0.1));
                Assert(Floats[1] = Single(0.2));
                Assert(Floats[2] = Single(0.4));

  TestCompareMethod();
  TestWeights();
  TestStatic();
  TestOverload();
end.